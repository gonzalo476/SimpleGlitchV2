name: Build and Release Multi-Version

on:
  # Trigger manual from GitHub UI
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        default: "v1.0.0"

  # Trigger automatically when pushing a tag
  push:
    tags:
      - "v*"

env:
  image: ghcr.io/gonzalo476/nukedockerbuild

jobs:
  build-linux:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    strategy:
      matrix:
        # Change here to add/remove Nuke versions
        nuke_version: ["12.1"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Pull Linux image
        run: |
          docker pull "${{ env.image }}:${{ matrix.nuke_version }}-linux"

      - name: Build on Linux
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/nuke_build_directory" \
            "${{ env.image }}:${{ matrix.nuke_version }}-linux" bash -c "
              cd /nuke_build_directory &&
              cmake . \
                -DNuke_ROOT=/usr/local/nuke_install \
                -DNUKE_INSTALL_PATH=/usr/local/nuke_install \
                -B build &&
              cmake --build build
            "

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          # Artifact will be named: SimpleGlitch2-Nuke12.1-Linux.zip
          name: "${{ github.event.repository.name }}-Nuke${{ matrix.nuke_version }}-Linux"
          path: ${{ github.workspace }}/build/lib

  build-windows:
    runs-on: ubuntu-latest # still using ubuntu to run Windows container
    permissions:
      contents: read
      packages: read

    strategy:
      matrix:
        nuke_version: ["12.1"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Pull Windows image
        run: |
          docker pull "${{ env.image }}:${{ matrix.nuke_version }}-windows"

      - name: "Debug: list /usr/local/nuke_install"
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/nuke_build_directory" \
            "${{ env.image }}:${{ matrix.nuke_version }}-windows" bash -c "
              echo '--- /usr/local/nuke_install contents ---' &&
              ls -R /usr/local/nuke_install
            "

      - name: Build on Windows (inside container)
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/nuke_build_directory" \
            "${{ env.image }}:${{ matrix.nuke_version }}-windows" bash -c "
              cd /nuke_build_directory &&
              rm -rf build &&
              source /opt/msvc/msvcenv-native.sh &&
              cmake . -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_COMPILER=/opt/msvc/bin/x64/cl \
                -DCMAKE_CXX_COMPILER=/opt/msvc/bin/x64/cl \
                -DCMAKE_LINKER=/opt/msvc/bin/x64/link \
                -DCMAKE_SYSTEM_NAME=Windows \
                -DNuke_ROOT=/usr/local/nuke_install \
                -DNUKE_INSTALL_PATH=/usr/local/nuke_install \
                -B build &&
              cmake --build build
            "

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          # Artifact will be named: SimpleGlitch2-Nuke12.1-Windows.zip
          name: "${{ github.event.repository.name }}-Nuke${{ matrix.nuke_version }}-Windows"
          path: ${{ github.workspace }}/build/lib/Release

  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    permissions:
      contents: write
    if: ${{ always() && !cancelled() && needs.build-linux.result == 'success' }}

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          # This will produce folders:
          #   SimpleGlitch2-Nuke12.1-Linux/
          #   SimpleGlitch2-Nuke12.1-Windows/
          path: ${{ github.workspace }}

      - name: Get version for release
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag_name=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "version_clean=$(echo ${{ github.event.inputs.version }} | sed 's/^v//')" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "version_clean=$(echo ${GITHUB_REF#refs/tags/} | sed 's/^v//')" >> $GITHUB_OUTPUT
          fi

      - name: Create release-assets folder
        run: |
          mkdir -p release-assets

      - name: Generate ZIPs and copy raw binaries to release-assets
        run: |
          PROJECT_NAME="${{ github.event.repository.name }}"
          VERSION="${{ steps.get_version.outputs.version_clean }}"

          # Iterate over each downloaded artifact folder:
          for artifact_dir in ${{ github.workspace }}/*; do
            if [ -d "$artifact_dir" ]; then
              base="$(basename "$artifact_dir")"
              # base format: SimpleGlitch2-Nuke12.1-Linux or ...-Windows

              # Split by dashes: [plugin] - [Nuke12.1] - [Linux]
              IFS='-' read -r plugin_label nuke_label os_label <<< "$base"
              # plugin_label = SimpleGlitch2
              # nuke_label   = Nuke12.1
              # os_label     = Linux (or Windows)

              # Extract version number only (remove "Nuke" prefix)
              nuke_version="${nuke_label#Nuke}"

              # Build ZIP name, e.g. SimpleGlitch2-Nuke12.1-Linux.zip
              zip_name="${plugin_label}-Nuke${nuke_version}-${os_label}.zip"

              cd "$artifact_dir"

              # 1) Copy raw binaries (.so / .dll) into release-assets/
              if ls *.so 1> /dev/null 2>&1; then
                cp *.so "${{ github.workspace }}/release-assets/"
              fi
              if ls *.dll 1> /dev/null 2>&1; then
                cp *.dll "${{ github.workspace }}/release-assets/"
              fi

              # 2) Create ZIP containing all binaries
              zip -j "${{ github.workspace }}/release-assets/${zip_name}" *.so *.dll *.dylib 2>/dev/null || true
              echo "→ Created ZIP: release-assets/${zip_name}"

              cd "${{ github.workspace }}"
            fi
          done

          echo "Files in release-assets:"
          ls -1 release-assets

      - name: Generate release notes (in English)
        id: release_notes
        run: |
          PROJECT_NAME="${{ github.event.repository.name }}"
          VERSION="${{ steps.get_version.outputs.version_clean }}"

          cat > release_notes.md << 'EOF'
          ## ${PROJECT_NAME} Plugin Release v${VERSION}

          ### Changes
          - Fix YAML syntax error on line 206 of `.github/workflows/build.yaml` (Invalid workflow file).

          ### Downloads by Nuke Version
          EOF

          # List the ZIP files created for each Nuke version
          for zipfile in release-assets/*.zip; do
            name="$(basename "$zipfile")"
            # name example: SimpleGlitch2-Nuke12.1-Linux.zip
            # Split: [SimpleGlitch2] - [Nuke12.1] - [Linux.zip]
            IFS='-' read -r plugin_label nuke_label os_label_ext <<< "$name"
            # os_label_ext incluye ".zip", así que lo quitamos
            os_label="${os_label_ext%.zip}"
            nuke_version="${nuke_label#Nuke}"  # e.g. 12.1

            if [ "$os_label" == "Linux" ]; then
              echo "- **Linux (Nuke ${nuke_version})**: \`${name}\`" >> release_notes.md
            elif [ "$os_label" == "Windows" ]; then
              echo "- **Windows (Nuke ${nuke_version})**: \`${name}\`" >> release_notes.md
            fi
          done

          cat >> release_notes.md << 'EOF'

          ### Installation

          1. Download the ZIP file or plugin (`.so` / `.dll`) matching your platform and Nuke version.  
          2. Extract or copy the binary into your Nuke plugins folder.  
          3. Restart Nuke.

          ### Compatibility

          - **Nuke 12.1**: Supported on Linux and Windows.  
          - Built specifically for Nuke 12.1 (may work on newer versions).
          EOF
