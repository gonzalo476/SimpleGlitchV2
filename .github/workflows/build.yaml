name: Build and Release Multi-Version

on:
  # Trigger manual desde GitHub UI
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        default: "v1.0.0"

  # Trigger automático cuando se hace push de un tag
  push:
    tags:
      - "v*"

env:
  image: ghcr.io/gonzalo476/nukedockerbuild

# =============================================================================
# NUKE VERSIONS MATRIX - Cambiar aquí para agregar/quitar versiones
# Actualmente compilando: 12.1
# Para agregar más versiones: ["12.1", "13.0", "14.0"]
# =============================================================================

jobs:
  build-linux:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    strategy:
      matrix:
        # CAMBIAR AQUÍ para agregar más versiones: ["12.1", "13.0", "14.0"]
        nuke_version: ["12.1"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull image
        run: docker pull ${{ env.image }}:${{ matrix.nuke_version }}-linux

      - name: Debug - Check available cmake
        run: |
          echo "Checking available cmake commands..."
          docker run --rm ${{ env.image }}:${{ matrix.nuke_version }}-linux bash -c "
            which cmake || echo 'cmake not found'
            which cmake3 || echo 'cmake3 not found'
            ls /usr/bin/cmake* || echo 'no cmake in /usr/bin'
            ls /usr/local/bin/cmake* || echo 'no cmake in /usr/local/bin'
            cmake --version || echo 'cmake version failed'
            cmake3 --version || echo 'cmake3 version failed'
          "

      - name: Run build
        run: docker run --rm -v "${{ github.workspace }}:/nuke_build_directory" ${{ env.image }}:${{ matrix.nuke_version }}-linux bash -c "cmake3 . -B build && cmake3 --build build"

      - uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.nuke_version }}
          path: ${{ github.workspace }}/build/lib

  build-windows:
    runs-on: ubuntu-latest # Cambio crítico: de windows-latest a ubuntu-latest
    permissions:
      contents: read
      packages: read

    strategy:
      matrix:
        # CAMBIAR AQUÍ para agregar más versiones: ["12.1", "13.0", "14.0"]
        nuke_version: ["12.1"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull image
        run: docker pull ${{ env.image }}:${{ matrix.nuke_version }}-windows

      - name: Run build
        run: |
          docker run --rm -v "${{ github.workspace }}:/nuke_build_directory" ${{ env.image }}:${{ matrix.nuke_version }}-windows bash -c "
          rm -rf build &&
          source /opt/msvc/msvcenv-native.sh &&
          cmake . -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=/opt/msvc/bin/x64/cl \
            -DCMAKE_CXX_COMPILER=/opt/msvc/bin/x64/cl \
            -DCMAKE_LINKER=/opt/msvc/bin/x64/link \
            -DCMAKE_SYSTEM_NAME=Windows \
            -B build &&
          cmake --build build
          "

      - uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.nuke_version }}
          path: ${{ github.workspace }}/build/lib/Release

  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    permissions: write-all
    if: ${{ always() && !cancelled() && needs.build-linux.result == 'success'}}

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "version_clean=$(echo ${{ github.event.inputs.version }} | sed 's/^v//')" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "version_clean=$(echo ${GITHUB_REF#refs/tags/} | sed 's/^v//')" >> $GITHUB_OUTPUT
          fi

      - name: Create individual zips for each OS and Nuke version
        run: |
          mkdir -p release-assets
          VERSION="${{ steps.get_version.outputs.version_clean }}"
          PROJECT_NAME="${{ github.event.repository.name }}"

          # Procesar cada artefacto y crear zips individuales
          for artifact in ${{ github.workspace }}/*; do
            if [ -d "$artifact" ]; then
              basename=$(basename -- $artifact)
              
              # Extraer OS y versión de Nuke del nombre del artefacto
              if [[ "$basename" =~ ^([^-]+)-(.+)$ ]]; then
                os="${BASH_REMATCH[1]}"
                nuke_version="${BASH_REMATCH[2]}"
                
                # Normalizar nombres de OS
                case "$os" in
                  "linux") os_name="Linux" ;;
                  "windows") os_name="Windows" ;;
                  *) os_name="$os" ;;
                esac
                
                # Crear zip individual para esta combinación OS-NukeVersion
                zip_name="${PROJECT_NAME}-${VERSION}-Nuke${nuke_version}-${os_name}.zip"
                
                # Comprimir archivos de plugin directamente
                cd "$artifact"
                if ls *.dll *.so *.dylib 1> /dev/null 2>&1; then
                  zip -j "${{ github.workspace }}/release-assets/${zip_name}" *.dll *.so *.dylib 2>/dev/null || true
                  echo "Created: ${zip_name}"
                fi
                cd "${{ github.workspace }}"
              fi
            fi
          done

          # Listar archivos creados
          echo "Created release files:"
          ls -la release-assets/

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.get_version.outputs.version_clean }}"
          PROJECT_NAME="${{ github.event.repository.name }}"

          cat > release_notes.md << EOF
          ## ${PROJECT_NAME} Plugin Release v${VERSION}

          ### Changes
          - [Add your changes here]

          ### Downloads by Nuke Version

          EOF

          # Agregar enlaces de descarga organizados por versión
          # Solo mostrar las versiones que realmente se están compilando
          # CAMBIAR AQUÍ si agregas más versiones: "12.1" "13.0" "14.0"
          for nuke_ver in "12.1"; do
            echo "#### Nuke ${nuke_ver}" >> release_notes.md
            
            # Verificar si existen archivos para esta versión
            if ls release-assets/*Nuke${nuke_ver}* 1> /dev/null 2>&1; then
              for file in release-assets/*Nuke${nuke_ver}*; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  if [[ "$filename" =~ Linux ]]; then
                    echo "- **Linux**: \`${filename}\`" >> release_notes.md
                  elif [[ "$filename" =~ Windows ]]; then
                    echo "- **Windows**: \`${filename}\`" >> release_notes.md
                  fi
                fi
              done
            else
              echo "- *No builds available for this version*" >> release_notes.md
            fi
            echo "" >> release_notes.md
          done

          cat >> release_notes.md << EOF
          ### Installation
          1. Download the appropriate file for your platform and Nuke version
          2. Extract to your Nuke plugins directory
          3. Restart Nuke

          ### Compatibility
          - **Nuke 12.1**: Windows and Linux platforms supported
          - Should work with newer Nuke versions (13.0+) but compiled specifically for 12.1
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          files: release-assets/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
