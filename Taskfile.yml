# Taskfile.yml
# -----------------------------------------------------------------------------
# This project uses the open-source repository by @gillesvink:
# https://github.com/gillesvink/NukeDockerBuild
# to build nuke plugins in a dockerized environment.
#
# thanks to @gillesvink for making this build system publicly available.
# although the builds are executed locally, this setup provides a clean
# and consistent environment for compiling Nuke plugins.
# -----------------------------------------------------------------------------

version: "3"

vars:
  PROJECT_NAME: SimpleGlitchV2
  VERSION: v1.0.0
  # nuke versions to build-all
  NUKE_VERSIONS: 12.1,12.2,13.0,13.1,13.2,14.0,14.1,15.0
  OUTPUT_DIR: artifacts

tasks:
  build-linux:
    desc: Build Linux version for specific Nuke version
    vars:
      NUKE_VERSION: '{{.NUKE_VERSION | default "12.1"}}'
    cmds:
      - echo "Building Linux for Nuke {{.NUKE_VERSION}}"
      # run docker env with nuke installed
      - docker run --rm -v "{{.ROOT_DIR}}:/nuke_build_directory" nukedockerbuild:{{.NUKE_VERSION}}-linux bash -c "cd /nuke_build_directory && cmake . -DNuke_ROOT=/usr/local/nuke_install -DNUKE_INSTALL_PATH=/usr/local/nuke_install -B build-linux-{{.NUKE_VERSION}} && cmake --build build-linux-{{.NUKE_VERSION}}"
      
      # Create organized output directory structure
      - powershell -c "New-Item -ItemType Directory -Force -Path '{{.OUTPUT_DIR}}/Nuke{{.NUKE_VERSION}}/Linux'"
      # Copy compiled .so files to artifacts folder
      - powershell -c "if (Test-Path 'build-linux-{{.NUKE_VERSION}}/lib') { Get-ChildItem -Path 'build-linux-{{.NUKE_VERSION}}/lib' -Filter '*.so' -Recurse | Copy-Item -Destination '{{.OUTPUT_DIR}}/Nuke{{.NUKE_VERSION}}/Linux/'; Write-Host '‚úÖ Copied .so files to {{.OUTPUT_DIR}}/Nuke{{.NUKE_VERSION}}/Linux/' } else { Write-Host '‚ùå No lib directory found in build-linux-{{.NUKE_VERSION}}' }"
      # Clean up temporary build files to save disk space
      - powershell -c "if (Test-Path 'build-linux-{{.NUKE_VERSION}}') { Remove-Item -Recurse -Force 'build-linux-{{.NUKE_VERSION}}' }"
      - echo "‚úÖ Linux build completed and cleaned for Nuke {{.NUKE_VERSION}}"

  build-windows:
    desc: Build Windows version for specific Nuke version
    vars:
      NUKE_VERSION: '{{.NUKE_VERSION | default "12.1"}}'
    cmds:
      - echo "Building Windows for Nuke {{.NUKE_VERSION}}"
      # Use Docker with Windows cross-compilation environment, setup MSVC compiler
      - docker run --rm -v "{{.ROOT_DIR}}:/nuke_build_directory" nukedockerbuild:{{.NUKE_VERSION}}-windows bash -c "cd /nuke_build_directory && rm -rf build-windows-{{.NUKE_VERSION}} && source /opt/msvc/msvcenv-native.sh && cmake . -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/opt/msvc/bin/x64/cl -DCMAKE_CXX_COMPILER=/opt/msvc/bin/x64/cl -DCMAKE_LINKER=/opt/msvc/bin/x64/link -DCMAKE_SYSTEM_NAME=Windows -DNuke_ROOT=/usr/local/nuke_install -DNUKE_INSTALL_PATH=/usr/local/nuke_install -B build-windows-{{.NUKE_VERSION}} && cmake --build build-windows-{{.NUKE_VERSION}}"
      
      # Create Windows-specific output directory
      - powershell -c "New-Item -ItemType Directory -Force -Path '{{.OUTPUT_DIR}}/Nuke{{.NUKE_VERSION}}/Windows'"
      # Copy compiled .dll files, check both Release subfolder and lib folder
      - powershell -c "if (Test-Path 'build-windows-{{.NUKE_VERSION}}/lib/Release') { Get-ChildItem -Path 'build-windows-{{.NUKE_VERSION}}/lib/Release' -Filter '*.dll' -Recurse | Copy-Item -Destination '{{.OUTPUT_DIR}}/Nuke{{.NUKE_VERSION}}/Windows/'; Write-Host '‚úÖ Copied .dll files to {{.OUTPUT_DIR}}/Nuke{{.NUKE_VERSION}}/Windows/' } elseif (Test-Path 'build-windows-{{.NUKE_VERSION}}/lib') { Get-ChildItem -Path 'build-windows-{{.NUKE_VERSION}}/lib' -Filter '*.dll' -Recurse | Copy-Item -Destination '{{.OUTPUT_DIR}}/Nuke{{.NUKE_VERSION}}/Windows/'; Write-Host '‚úÖ Copied .dll files to {{.OUTPUT_DIR}}/Nuke{{.NUKE_VERSION}}/Windows/' } else { Write-Host '‚ùå No lib directory found in build-windows-{{.NUKE_VERSION}}' }"
      # Clean up temporary build files
      - powershell -c "if (Test-Path 'build-windows-{{.NUKE_VERSION}}') { Remove-Item -Recurse -Force 'build-windows-{{.NUKE_VERSION}}' }"
      - echo "‚úÖ Windows build completed and cleaned for Nuke {{.NUKE_VERSION}}"

  build-all:
    desc: Build all versions for Linux and Windows
    cmds:
      - echo "üöÄ Building all Nuke versions..."
      # Loop through all Nuke versions and build Linux version for each
      - for: { var: NUKE_VERSIONS, split: "," }
        task: build-linux
        vars:
          NUKE_VERSION: "{{.ITEM}}"
      # Loop through all Nuke versions and build Windows version for each
      - for: { var: NUKE_VERSIONS, split: "," }
        task: build-windows
        vars:
          NUKE_VERSION: "{{.ITEM}}"
      - echo "üì¶ Final artifacts structure:"
      # Display complete artifacts directory tree
      - powershell -c "if (Test-Path '{{.OUTPUT_DIR}}') { Get-ChildItem -Recurse '{{.OUTPUT_DIR}}' } else { Write-Host 'No artifacts directory found' }"

  build-single:
    desc: Build single version (specify NUKE_VERSION=12.1)
    cmds:
      - echo "üöÄ Building {{.NUKE_VERSION}} for both platforms..."
      # Build both Linux and Windows for specified Nuke version
      - task: build-linux
        vars:
          NUKE_VERSION: "{{.NUKE_VERSION}}"
      - task: build-windows
        vars:
          NUKE_VERSION: "{{.NUKE_VERSION}}"
      - echo "üì¶ Built artifacts:"
      # Show what was built for this specific version
      - powershell -c "Get-ChildItem '{{.OUTPUT_DIR}}/Nuke{{.NUKE_VERSION}}/' -Recurse"

  clean:
    desc: Clean all build and output directories
    cmds:
      # Remove all temporary build directories
      - powershell -c "Get-ChildItem -Directory -Name 'build-*' | ForEach-Object { Remove-Item -Recurse -Force $_ }"
      # Remove entire artifacts directory
      - powershell -c "if (Test-Path '{{.OUTPUT_DIR}}') { Remove-Item -Recurse -Force '{{.OUTPUT_DIR}}' }"
      - echo "‚úÖ Cleaned all build directories and artifacts"

  clean-builds:
    desc: Clean only build directories (keep artifacts)
    cmds:
      # Only remove temporary build directories, preserve compiled artifacts
      - powershell -c "Get-ChildItem -Directory -Name 'build-*' | ForEach-Object { Remove-Item -Recurse -Force $_ }"
      - echo "‚úÖ Cleaned build directories (kept artifacts)"

  show-artifacts:
    desc: Show final artifacts
    cmds:
      - echo "üì¶ Final artifacts:"
      # List all compiled plugin files in artifacts directory
      - powershell -c "if (Test-Path '{{.OUTPUT_DIR}}') { Get-ChildItem -Recurse '{{.OUTPUT_DIR}}' -Include '*.so','*.dll' } else { Write-Host 'No artifacts found' }"

  package:
    desc: Create ZIP packages from artifacts
    cmds:
      # Create release directory for ZIP files
      - powershell -c "New-Item -ItemType Directory -Force -Path 'release'"
      # For each Nuke version, create separate ZIP files for Linux and Windows
      - powershell -c |
          Get-ChildItem -Directory '{{.OUTPUT_DIR}}/Nuke*' | ForEach-Object {
            $nukeVersion = $_.Name
            $linuxPath = Join-Path $_.FullName 'Linux'
            $windowsPath = Join-Path $_.FullName 'Windows'

            if ((Test-Path $linuxPath) -and (Get-ChildItem $linuxPath -Filter '*.so')) {
              $zipName = "release/{{.PROJECT_NAME}}-$nukeVersion-Linux.zip"
              Compress-Archive -Path "$linuxPath/*" -DestinationPath $zipName -Force
              Write-Host "‚úÖ Created $zipName"
            }

            if ((Test-Path $windowsPath) -and (Get-ChildItem $windowsPath -Filter '*.dll')) {
              $zipName = "release/{{.PROJECT_NAME}}-$nukeVersion-Windows.zip"
              Compress-Archive -Path "$windowsPath/*" -DestinationPath $zipName -Force
              Write-Host "‚úÖ Created $zipName"
            }
          }
      - echo "üì¶ Release packages created in release/"
      # Show all created ZIP files
      - powershell -c "Get-ChildItem 'release/'"